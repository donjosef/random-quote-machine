{"version":3,"sources":["components/Quote/Quote.js","components/Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","quote","color","react_default","a","createElement","className","id","react_fontawesome_index_es","icon","style","transition","author","Button","btn","btnClass","type","click","text","href","concat","title","onClick","library","add","faQuoteLeft","faRetweet","App","state","randomColor","toHexColor","n","Math","abs","toString","getQuote","fetch","then","res","json","data","_this","setState","getQuoteHandler","r","floor","random","g","b","this","background","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9602bfa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faQuoteLeft)\r\n\r\nexport default function Quote(props) {\r\n    const { quote, color } = props; //quote is an object received by App as prop\r\n  return (\r\n    <div className=\"Quote\">\r\n      <p id=\"text\" className=\"text\" >\r\n        <FontAwesomeIcon icon=\"quote-left\" color={color}/>\r\n        {quote ? ' ' + quote.quote : null}\r\n      </p>\r\n      <span className=\"author\" id=\"author\" style={{color, transition:'color 0.5s ease-in-out'}}>&minus; {quote ? quote.author : null}</span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faRetweet } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faRetweet)\r\n\r\nexport default function Button(props) {\r\n    const { type, click, text, color } = props;\r\n\r\n    let btn;\r\n    let btnClass;\r\n    if (type === 'tweet') {\r\n        btnClass = 'btn-tweet';\r\n        btn = <a\r\n            className={btnClass}\r\n            id=\"tweet-quote\" \r\n            href={`https://twitter.com/intent/tweet?text=${text}&related=freecodecamp&hashtags=quotes`} \r\n            title=\"Tweet this quote!\">\r\n            <FontAwesomeIcon icon=\"retweet\" color={color}/>\r\n        </a>\r\n    }\r\n\r\n    if (type === 'new-quote') {\r\n        btnClass = 'btn-new-quote';\r\n        btn = <button className={btnClass} id=\"new-quote\" onClick={click}>New Quote</button>\r\n    }\r\n\r\n    return btn;\r\n}\r\n","import React, { Component } from 'react';\n\nimport Quote from './components/Quote/Quote';\nimport Button from './components/Button/Button';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    quote: null,\n    randomColor: null\n  }\n\n  componentDidMount() {\n    this.getQuote();\n\n    const r = this.toHexColor(Math.floor(Math.random() * 256));\n    const g = this.toHexColor(Math.floor(Math.random() * 256));\n    const b = this.toHexColor(Math.floor(Math.random() * 256));\n    this.setState({ randomColor: `#${r}${g}${b}` });\n\n  }\n\n  toHexColor = (n) => {\n    /* Avoid number with one digit */\n    if (n < 16) {\n      return '0' + Math.abs(n).toString(16);\n    }\n    return Math.abs(n).toString(16);\n  }\n\n  getQuote = () => {\n    fetch('https://talaikis.com/api/quotes/random/')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ quote: data })\n      });\n  }\n\n  getQuoteHandler = () => {\n    this.getQuote();\n    const r = this.toHexColor(Math.floor(Math.random() * 256));\n    const g = this.toHexColor(Math.floor(Math.random() * 256));\n    const b = this.toHexColor(Math.floor(Math.random() * 256));\n    this.setState({ randomColor: `#${r}${g}${b}` });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\" style={{\n        background: this.state.randomColor,\n        transition: 'background 0.3s ease-in-out'\n        }}>\n        <div className=\"App\" id=\"quote-box\">\n          <Quote quote={this.state.quote} color={this.state.randomColor}/>\n          <Button \n            type=\"tweet\" \n            text={this.state.quote ? this.state.quote.quote : ''} \n            color={this.state.randomColor}/>\n          <Button type=\"new-quote\" click={this.getQuoteHandler} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}